@page "/"
@rendermode InteractiveServer
@inject BackendService BackendService

<PageTitle>Boardify</PageTitle>

<div class="flex-col gap-2 mb-3">
    <div class="mb-2 flex items-center justify-between">
        <h1 class="text-5xl font-bold">Boardify</h1>
        <a href="/add" class="btn btn-primary flex">
        <span class="material-icons">
            add
        </span>
            Board erstellen
        </a>
    </div>

    <div class="w-full">
        <div class="join w-full">
            <input @bind="_searchTerm" @bind:event="oninput" type="text" placeholder="Suche"
                   class="input input-bordered join-item flex-grow"/>
            <button class="btn btn-primary join-item rounded-r-3xl">
            <span class="material-icons">
                search
            </span>
            </button>
        </div>
    </div>
</div>

<div class="flex flex-col gap-3">
    @if (!FilteredBoards.Any())
    {
        <div class="text-center p-4">
            <p class="text-gray-500">Keine Boards gefunden</p>
        </div>
    }
    @foreach (var board in FilteredBoards)
    {
        var id = board.Id;
        <div class="relative">
            <a href="/board/@board.Id"
               class="flex items-center justify-between rounded-md p-4 shadow-md hover:shadow-lg">
                <div class="flex flex-col">
                    <span class="text-xl font-bold">@board.Name</span>
                    <span
                        class="text-gray-400">@board.TicketsCount Tickets, davon @board.DoneTicketsCount erledigt</span>
                </div>
            </a>
            <div class="absolute top-2 right-2">
                <details class="dropdown">
                    <summary class="btn btn-circle btn-ghost">
                        <span class="material-icons">
                            more_vert
                        </span>
                    </summary>
                    <ul class="menu dropdown-content bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm">
                        <li>
                            <button class="text-red-700" @onclick="() => Delete(id)">Löschen</button>
                        </li>
                    </ul>
                </details>
            </div>
        </div>
    }
</div>

@code {
    private List<BoardOverview> _boards = new();
    private string? _searchTerm;
    private string? _errorMessage;

    private IEnumerable<BoardOverview> FilteredBoards =>
        string.IsNullOrWhiteSpace(_searchTerm)
            ? _boards
            : _boards.Where(b => b.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        _boards = await BackendService.GetBoardsOverview();
    }

    async Task Delete(string id)
    {
        try
        {
            await BackendService.DeleteBoard(id);
            _boards.RemoveAll(b => b.Id == id);
            _errorMessage = null;
        }
        catch (Exception e)
        {
            _errorMessage = $"Failed to delete board: {e.Message}";
            await Console.Error.WriteLineAsync($"Error deleting board {id}: {e}");
        }
        finally
        {
            StateHasChanged();
        }
    }

}