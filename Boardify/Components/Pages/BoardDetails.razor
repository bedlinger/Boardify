@page "/board/{id}"
@using Boardify.Components.Modals
@layout FullLayout
@rendermode InteractiveServer
@inject BackendService BackendService

<div class="mb-3 flex items-center justify-between">
    <div class="flex gap-2">
        @if (_isBoardNameEdited)
        {
            <InputText @bind-Value="_boardNameEdit" type="text" class="input !w-full" placeholder="Name" id="name"
                       required/>
            <button class="btn btn-primary" @onclick="EditBoardName">Ändern</button>
            <button class="btn" @onclick="CancelBoardNameEdit">Abbrechen</button>
        }
        else
        {
            <h2 class="text-3xl font-bold">@_board.Name</h2>
            <button class="btn btn-square btn-primary btn-ghost" @onclick="OpenBoardNameEdit">
                <span class="material-icons">edit</span>
            </button>
        }
    </div>
    <a href="/" class="btn btn-square btn-ghost">
        <span class="material-icons">home</span>
    </a>
</div>

<div class="flex flex-col gap-3 md:flex-row">
    @foreach (var (stage, i) in _board.Stages.Select((v, i) => (v, i)))
    {
        <div class="flex min-h-96 flex-1 flex-col gap-2 rounded-lg bg-gray-50 p-2"
             @ondrop="() => DropTicket(i)"
             ondragover="event.preventDefault();">
            <div class="mb-2 flex justify-between p-2">
                <h3 class="font-bold text-gray-600 uppercase">@stage.Name</h3>
                <div class="badge badge-soft badge-primary">@GetTicketsInStage(i).Count()</div>
            </div>
            @foreach (var ticket in GetTicketsInStage(i))
            {
                <div class="flex cursor-move flex-col gap-2 rounded-md border-l-4 bg-white p-2 shadow-md 
                            @(ticket.StageNr == 0 ? "border-l-blue-600" : "border-l-blue-400") 
                            @(ticket.IsDone ? "opacity-60" : "")"
                     draggable="true"
                     @ondragstart="() => StartTicketDrag(ticket.Id)"
                     @onclick="() => OpenTicket(ticket.Id)">
                    <div class="text-lg @(ticket.IsDone ? "line-through" : "")">@ticket.Title</div>
                    @if (ticket.Tags.Any())
                    {
                        <div class="flex flex-wrap gap-2">
                            @foreach (var tag in ticket.Tags)
                            {
                                <div class="badge badge-soft badge-primary badge-sm">
                                    <span class="text-sm font-medium truncate max-w-[150px] pointer-events-none">
                                        @tag.Name
                                    </span>
                                </div>
                            }
                        </div>
                    }
                    <div class="flex justify-end text-gray-400">
                        @if (ticket.DueAt == null)
                        {
                            <span>Erstellt am @ticket.CreatedDateFormatted</span>
                        }
                        else
                        {
                            <span>Fällig am @ticket.DueDateFormatted</span>
                        }
                    </div>
                </div>
            }
            <div class="flex justify-center text-gray-400">
                <button class="btn btn-ghost btn-sm flex" @onclick="() => OpenAdd(i)">
                    <span class="material-icons">add</span>
                    Neues Ticket
                </button>
            </div>
        </div>
    }
</div>

<TicketDetailsModal @ref="_detailsModal"
                    Board="_board"
                    OnEdit="OpenEdit"
                    OnDelete="DeleteOpenedTicket"/>

<TicketAddModal @ref="_addModal"
                Board="_board"
                OnTicketAdded="HandleTicketAdded"/>

<TicketEditModal @ref="_editModal"
                 Board="_board"
                 OnTicketUpdated="HandleTicketUpdated"/>

@code {
    [Parameter] public string Id { get; set; } = "";

    private Board _board = new()
    {
        Id = "",
        Name = "",
        Stages = new List<Stage>(),
        Tickets = new List<Ticket>(),
        Tags = new List<Tag>()
    };

    private Ticket? _draggedTicket;
    private bool _isBoardNameEdited;
    private string _boardNameEdit = "";

    private TicketDetailsModal _detailsModal = null!;
    private TicketAddModal _addModal = null!;
    private TicketEditModal _editModal = null!;

    protected override async Task OnInitializedAsync()
    {
        _board = await BackendService.GetBoard(Id);
    }

    private IEnumerable<Ticket> GetTicketsInStage(int stageNr)
    {
        return _board.Tickets.Where(t => t.StageNr == stageNr);
    }

    private async Task DropTicket(int stage)
    {
        if (_draggedTicket != null)
        {
            var updatedTicket = await BackendService.UpdateTicket(
                _draggedTicket.Id,
                new TicketUpdate { StageNr = stage }
            );

            UpdateTicketInCollection(updatedTicket);
        }
    }

    private void StartTicketDrag(string id)
    {
        _draggedTicket = _board.Tickets.Find(t => t.Id == id);
    }

    private void OpenTicket(string id)
    {
        var ticket = _board.Tickets.Find(t => t.Id == id);
        if (ticket != null)
        {
            _detailsModal.Open(ticket);
        }
    }

    private void OpenAdd(int stage)
    {
        _addModal.Open(stage);
    }

    private void OpenEdit(Ticket ticket)
    {
        _editModal.Open(ticket);
    }

    private async Task DeleteOpenedTicket(Ticket ticket)
    {
        await BackendService.DeleteTicket(ticket.Id);
        _board.Tickets.RemoveAll(t => t.Id == ticket.Id);
    }

    private void OpenBoardNameEdit()
    {
        _boardNameEdit = _board.Name;
        _isBoardNameEdited = true;
    }

    private void CancelBoardNameEdit()
    {
        _isBoardNameEdited = false;
    }

    private async Task EditBoardName()
    {
        if (string.IsNullOrWhiteSpace(_boardNameEdit)) return;

        _board.Name = _boardNameEdit;
        await BackendService.UpdateBoard(
            _board.Id,
            new BoardUpdate { Name = _board.Name }
        );

        _isBoardNameEdited = false;
    }

    private void HandleTicketAdded(Ticket newTicket)
    {
        _board.Tickets.Add(newTicket);
    }

    private void HandleTicketUpdated(Ticket updatedTicket)
    {
        UpdateTicketInCollection(updatedTicket);
    }

    private void UpdateTicketInCollection(Ticket ticket)
    {
        var index = _board.Tickets.FindIndex(t => t.Id == ticket.Id);
        if (index != -1)
        {
            _board.Tickets[index] = ticket;
        }
        else
        {
            _board.Tickets.Add(ticket);
        }
    }

}