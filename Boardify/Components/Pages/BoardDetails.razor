@page "/board/{id}"
@using Boardify.Components.Modals
@layout FullLayout
@rendermode InteractiveServer
@inject BackendService BackendService

<div class="mb-3 flex items-center justify-between">
    <div class="flex gap-2">
        @if (_isBoardNameEdited)
        {
            <InputText @bind-Value="_boardNameEdit" type="text" class="input !w-full" placeholder="Name" id="name"
                       required/>
            <button class="btn btn-primary" @onclick="EditBoardName">Ändern</button>
            <button class="btn" @onclick="CancelBoardNameEdit">Abbrechen</button>
        }
        else
        {
            <h2 class="text-3xl font-bold">@_board.Name</h2>
            <button class="btn btn-square btn-primary btn-ghost" @onclick="OpenBoardNameEdit">
                <span class="material-icons">edit</span>
            </button>
        }
    </div>
    <div class="flex gap-2">
        <a href="/" class="btn btn-square btn-ghost">
            <span class="material-icons">home</span>
        </a>
    </div>
</div>

<div class="mb-5">
    <div class="w-full flex gap-2">
        <div class="join w-full">
            <input @bind="_searchQuery" @bind:event="oninput" @onkeydown="HandleSearchKeyDown"
                   type="text" placeholder="Suchen und Filtern"
                   class="input input-bordered join-item flex-grow"/>
            <button class="btn btn-primary join-item rounded-r-3xl" @onclick="ExecuteSearch">
                <span class="material-icons">search</span>
            </button>
        </div>
        <button class="btn btn-circle btn-ghost" @onclick="() => _showSearchHelp = true">
            <span class="material-icons">help_outline</span>
        </button>
    </div>
    @if (!string.IsNullOrEmpty(_searchError))
    {
        <div class="text-error text-sm mt-1">@_searchError</div>
    }
</div>

<div class="flex flex-col gap-3 md:flex-row">
    @foreach (var (stage, i) in _board.Stages.Select((v, i) => (v, i)))
    {
        <div class="flex min-h-96 flex-1 flex-col gap-2 rounded-lg bg-gray-50 p-2"
             @ondrop="() => DropTicket(i)"
             ondragover="event.preventDefault();">
            <div class="mb-2 flex justify-between p-2">
                <h3 class="font-bold text-gray-600 uppercase">@stage.Name</h3>
                <div class="badge badge-soft badge-primary">@GetFilteredTicketsInStage(i).Count()</div>
            </div>
            @foreach (var ticket in GetFilteredTicketsInStage(i))
            {
                <div class="flex cursor-move flex-col gap-2 rounded-md border-l-4 bg-white p-2 shadow-md 
                            @(ticket.StageNr == 0 ? "border-l-blue-600" : "border-l-blue-400") 
                            @(ticket.IsDone ? "opacity-60" : "")"
                     draggable="true"
                     @ondragstart="() => StartTicketDrag(ticket.Id)"
                     @onclick="() => OpenTicket(ticket.Id)">
                    <div class="text-lg @(ticket.IsDone ? "line-through" : "")">@ticket.Title</div>
                    @if (ticket.Tags.Any())
                    {
                        <div class="flex flex-wrap gap-2">
                            @foreach (var tag in ticket.Tags)
                            {
                                <div class="badge badge-soft badge-primary badge-sm">
                                    <span class="text-sm font-medium truncate max-w-[150px] pointer-events-none">
                                        @tag.Name
                                    </span>
                                </div>
                            }
                        </div>
                    }
                    <div class="flex justify-end text-gray-400">
                        @if (ticket.DueAt == null)
                        {
                            <span>Erstellt am @ticket.CreatedDateFormatted</span>
                        }
                        else
                        {
                            <span>Fällig am @ticket.DueDateFormatted</span>
                        }
                    </div>
                </div>
            }
            <div class="flex justify-center text-gray-400">
                <button class="btn btn-ghost btn-sm flex" @onclick="() => OpenAdd(i)">
                    <span class="material-icons">add</span>
                    Neues Ticket
                </button>
            </div>
        </div>
    }
</div>

@if (_showSearchHelp)
{
    <div class="modal modal-open">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Suche Hilfe</h3>
            <div class="py-4">
                <p class="mb-2">Verwende folgende Syntax, um Tickets zu filtern:</p>
                <ul class="list-disc ml-6 space-y-1">
                    <li><code>title:wert</code> - Sucht nach Tickets mit dem Wort "wert" im Titel</li>
                    <li><code>desc:wert</code> - Sucht nach Tickets mit dem Wort "wert" in der Beschreibung</li>
                    <li><code>tag:wert</code> - Sucht nach Tickets mit dem Tag "wert"</li>
                    <li><code>stage:wert</code> - Sucht nach Tickets in der Stage "wert"</li>
                    <li><code>done:true/false</code> - Sucht nach erledigten/nicht erledigten Tickets</li>
                    <li><code>due:dd.mm.yyyy</code> - Sucht nach Tickets mit dem Fälligkeitsdatum</li>
                </ul>
                <p class="mt-2">Mehrere Suchkriterien mit Komma trennen: <code>title:wichtig,tag:dringend</code></p>
                <p class="mt-2">Ohne Attribut wird überall gesucht: <code>wichtig</code> findet Tickets mit "wichtig"
                    irgendwo</p>
                <div class="bg-base-200 p-3 rounded-lg mt-3">
                    <p class="font-semibold">Beispiele:</p>
                    <ul class="list-disc ml-6">
                        <li><code>tag:dringend,done:false</code> - Unerledigte Tickets mit Tag "dringend"</li>
                        <li><code>title:bug</code> - Tickets mit "bug" im Titel</li>
                        <li><code>bug</code> - Tickets mit "bug" irgendwo</li>
                    </ul>
                </div>
            </div>
            <div class="modal-action">
                <button class="btn" @onclick="() => _showSearchHelp = false">Schließen</button>
            </div>
        </div>
    </div>
}

<TicketDetailsModal @ref="_detailsModal"
                    Board="_board"
                    OnEdit="OpenEdit"
                    OnDelete="DeleteOpenedTicket"/>

<TicketAddModal @ref="_addModal"
                Board="_board"
                OnTicketAdded="HandleTicketAdded"/>

<TicketEditModal @ref="_editModal"
                 Board="_board"
                 OnTicketUpdated="HandleTicketUpdated"/>

@code {
    [Parameter] public string Id { get; set; } = "";

    private Board _board = new()
    {
        Id = "",
        Name = "",
        Stages = new List<Stage>(),
        Tickets = new List<Ticket>(),
        Tags = new List<Tag>()
    };

    private Ticket? _draggedTicket;
    private bool _isBoardNameEdited;
    private string _boardNameEdit = "";
    private string _searchQuery = "";
    private string _searchError = "";
    private readonly Dictionary<string, string[]> _activeFilters = new();
    private bool _showSearchHelp = false;

    private TicketDetailsModal _detailsModal = null!;
    private TicketAddModal _addModal = null!;
    private TicketEditModal _editModal = null!;

    protected override async Task OnInitializedAsync()
    {
        _board = await BackendService.GetBoard(Id);
    }

    private IEnumerable<Ticket> GetFilteredTicketsInStage(int stageNr)
    {
        var ticketsInStage = _board.Tickets.Where(t => t.StageNr == stageNr);

        return _activeFilters.Count == 0 ? ticketsInStage : ticketsInStage.Where(MatchesFilters);
    }

    private bool MatchesFilters(Ticket ticket)
    {
        if (_activeFilters.Count == 0)
        {
            return true;
        }

        if (_activeFilters.TryGetValue("general", out var generalTerms))
        {
            var generalMatches = generalTerms.Any(term =>
                ticket.Title.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                ticket.Description.Contains(term, StringComparison.OrdinalIgnoreCase) ||
                ticket.Tags.Any(tag => tag.Name.Contains(term, StringComparison.OrdinalIgnoreCase)));

            if (!generalMatches)
            {
                return false;
            }
        }

        if (_activeFilters.TryGetValue("title", out var titleTerms) &&
            !titleTerms.Any(term => ticket.Title.Contains(term, StringComparison.OrdinalIgnoreCase)))
        {
            return false;
        }

        if (_activeFilters.TryGetValue("desc", out var descTerms) &&
            !descTerms.Any(term => ticket.Description.Contains(term, StringComparison.OrdinalIgnoreCase)))
        {
            return false;
        }

        if (_activeFilters.TryGetValue("tag", out var tagTerms) &&
            !tagTerms.Any(term => ticket.Tags.Any(tag =>
                tag.Name.Contains(term, StringComparison.OrdinalIgnoreCase))))
        {
            return false;
        }

        if (_activeFilters.TryGetValue("stage", out var stageTerms))
        {
            var stageName = _board.Stages.FirstOrDefault(s => s.Nr == ticket.StageNr)?.Name ?? "";
            if (!stageTerms.Any(term => stageName.Contains(term, StringComparison.OrdinalIgnoreCase)))
            {
                return false;
            }
        }

        if (_activeFilters.TryGetValue("done", out var doneTerms))
        {
            if (doneTerms.Length > 0 && bool.TryParse(doneTerms[0], out bool isDone))
            {
                if (ticket.IsDone != isDone)
                {
                    return false;
                }
            }
        }

        if (!_activeFilters.TryGetValue("due", out var dueTerms) || dueTerms.Length <= 0) return true;
        if (ticket.DueAt == null)
        {
            return false;
        }

        if (!DateTime.TryParseExact(dueTerms[0], "dd.MM.yyyy", null,
                System.Globalization.DateTimeStyles.None, out var dueDate)) return true;
        return ticket.DueAt?.Date == dueDate.Date;
    }

    private void HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ExecuteSearch();
        }
    }

    private void ExecuteSearch()
    {
        _searchError = "";
        _activeFilters.Clear();

        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            return;
        }

        try
        {
            var filterParts = _searchQuery.Split(',', StringSplitOptions.RemoveEmptyEntries);

            foreach (var part in filterParts)
            {
                if (part.Contains(':'))
                {
                    var splitPart = part.Split(':', 2);
                    var attribute = splitPart[0].Trim().ToLowerInvariant();
                    var value = splitPart[1].Trim();

                    if (string.IsNullOrEmpty(value)) continue;
                    if (!_activeFilters.ContainsKey(attribute))
                    {
                        _activeFilters[attribute] = [value];
                    }
                    else
                    {
                        _activeFilters[attribute] = _activeFilters[attribute].Append(value).ToArray();
                    }
                }
                else
                {
                    var generalTerm = part.Trim();
                    if (string.IsNullOrEmpty(generalTerm)) continue;
                    if (!_activeFilters.ContainsKey("general"))
                    {
                        _activeFilters["general"] = [generalTerm];
                    }
                    else
                    {
                        _activeFilters["general"] = _activeFilters["general"].Append(generalTerm).ToArray();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _searchError = "Fehler bei der Suche: " + ex.Message;
        }
    }

    private async Task DropTicket(int stage)
    {
        if (_draggedTicket != null)
        {
            var updatedTicket = await BackendService.UpdateTicket(
                _draggedTicket.Id,
                new TicketUpdate { StageNr = stage }
            );

            UpdateTicketInCollection(updatedTicket);
        }
    }

    private void StartTicketDrag(string id)
    {
        _draggedTicket = _board.Tickets.Find(t => t.Id == id);
    }

    private void OpenTicket(string id)
    {
        var ticket = _board.Tickets.Find(t => t.Id == id);
        if (ticket != null)
        {
            _detailsModal.Open(ticket);
        }
    }

    private void OpenAdd(int stage)
    {
        _addModal.Open(stage);
    }

    private void OpenEdit(Ticket ticket)
    {
        _editModal.Open(ticket);
    }

    private async Task DeleteOpenedTicket(Ticket ticket)
    {
        await BackendService.DeleteTicket(ticket.Id);
        _board.Tickets.RemoveAll(t => t.Id == ticket.Id);
    }

    private void OpenBoardNameEdit()
    {
        _boardNameEdit = _board.Name;
        _isBoardNameEdited = true;
    }

    private void CancelBoardNameEdit()
    {
        _isBoardNameEdited = false;
    }

    private async Task EditBoardName()
    {
        if (string.IsNullOrWhiteSpace(_boardNameEdit)) return;

        _board.Name = _boardNameEdit;
        await BackendService.UpdateBoard(
            _board.Id,
            new BoardUpdate { Name = _board.Name }
        );

        _isBoardNameEdited = false;
    }

    private void HandleTicketAdded(Ticket newTicket)
    {
        _board.Tickets.Add(newTicket);
    }

    private void HandleTicketUpdated(Ticket updatedTicket)
    {
        UpdateTicketInCollection(updatedTicket);
        _detailsModal.RefreshTicket(updatedTicket);
    }

    private void UpdateTicketInCollection(Ticket ticket)
    {
        var index = _board.Tickets.FindIndex(t => t.Id == ticket.Id);
        if (index != -1)
        {
            _board.Tickets[index] = ticket;
        }
        else
        {
            _board.Tickets.Add(ticket);
        }
    }

}