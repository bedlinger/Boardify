@page "/login"
@rendermode InteractiveServer
@inject BackendService BackendService
@inject NavigationManager NavigationManager

<PageTitle>Login - Boardify</PageTitle>

<div class="flex flex-col items-center justify-center min-h-[70vh]">
    <div class="w-full max-w-md p-6 bg-white rounded-lg shadow-md">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-3xl font-bold">Login</h2>
            <a href="/" class="btn btn-square btn-ghost">
                <span class="material-icons">home</span>
            </a>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
                @_errorMessage
            </div>
        }

        <EditForm Model="@_credentials" OnSubmit="HandleLogin" class="space-y-4">
            <div>
                <label for="username" class="block mb-1 font-medium">Benutzername</label>
                <InputText @bind-Value="_credentials.Username" id="username" class="input input-bordered min-w-full"
                           required/>
            </div>

            <div>
                <label for="password" class="block mb-1 font-medium">Passwort</label>
                <InputText @bind-Value="_credentials.Password" id="password" type="password"
                           class="input input-bordered min-w-full" required/>
            </div>

            <button type="submit" class="btn btn-primary w-full mt-4" disabled="@_isLoading">
                @if (_isLoading)
                {
                    <span class="loading loading-spinner"></span>
                }
                Login
            </button>
        </EditForm>

        <div class="mt-4 text-center">
            <p>Kein Konto? <a href="/register" class="text-primary">Registrieren</a></p>
        </div>
    </div>
</div>

@code {
    private readonly UserCredentials _credentials = new() { Username = "", Password = "" };
    private string? _errorMessage;
    private bool _isLoading;

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            await BackendService.Login(_credentials);
            NavigationManager.NavigateTo("/");
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = "Login fehlgeschlagen. Bitte überprüfen Sie Ihre Anmeldedaten.";
            await Console.Error.WriteLineAsync($"Login error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessage = "Ein unbekannter Fehler ist aufgetreten. Bitte versuchen Sie es erneut.";
            await Console.Error.WriteLineAsync($"Login error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

}